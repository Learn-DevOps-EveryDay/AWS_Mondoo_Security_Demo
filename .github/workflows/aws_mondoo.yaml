name: Terraform Infra Pipeline

permissions:
  contents: read
  checks: write

on:
  workflow_dispatch:
    inputs:
      checkovScan:
        description: "Run Checkov Scan before plan/apply?"
        required: true
        default: "true"
        type: choice
        options: ["true", "false"]

      enableDestroy:
        description: "Enable destroy stage?"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]

      enableMondoo:
        description: "Run Mondoo Scan"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]

jobs:
  #aws configure
  # Stage 1: Checkov Scan
  checkov:
    if: ${{ github.event.inputs.checkovScan == 'true' }}
    runs-on: ubuntu-latest
    container:
      image: bridgecrew/checkov:latest
    steps:
    - name: Run Checkov
      run: |
        mkdir -p reports
        checkov -d terraform-project/ --recursive --output junitxml > reports/checkov-report.xml || true
    - name: Upload Checkov Report
      uses: actions/upload-artifact@v4
      with:
        name: checkov-report
        path: reports/checkov-report.xml
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v4
      with:
        report_paths: 'reports/checkov-report.xml'


  # Stage 2: Terraform Plan & Apply
  terraform:
    needs: [checkov]
    runs-on: ubuntu-latest
    environment: dev   # environment with required reviewers
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Terraform Init
        run: terraform -chdir=terraform-project init -backend-config=backend.tfvars
      - name: Terraform Plan
        run: |
          terraform -chdir=terraform-project plan -out=tfplan
          terraform -chdir=terraform-project show -no-color tfplan > terraform-project/plan-summary.txt
      - name: Upload Terraform Plan Summary
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-summary
          path: terraform-project/plan-summary.txt
      # Manual approval occurs here because of environment protection
      - name: Terraform Apply
        run: terraform -chdir=terraform-project apply -auto-approve tfplan

  # Stage 3: Destroy
  destroy:
    if: ${{ github.event.inputs.enableDestroy == 'true' }}
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}         
      - name: Terraform Init
        run: terraform -chdir=terraform-project init -backend-config=backend.tfvars
      - name: Terraform Destroy
        run: terraform -chdir=terraform-project destroy -auto-approve

  # Stage 4: Mondoo Scan
  mondoo:
    if: ${{ github.event.inputs.enableMondoo == 'true' }}
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - uses: actions/checkout@v4
      - name: Install Mondoo (cnspec)
        run: curl -sSL https://get.mondoo.com | bash
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ueu-north-1
      - name: Run Mondoo Scan
        run: cnspec scan aws --bundles policies/custom-s3-sg.mql.yaml --output json > mondoo-report.json
      - name: Upload Mondoo Report
        uses: actions/upload-artifact@v4
        with:
          name: mondoo-report
          path: mondoo-report.json
