name: Terraform Infra Pipeline

permissions:
  contents: read
  checks: write

on:
  workflow_dispatch:
    inputs:
      checkovScan:
        description: "Run Checkov Scan before plan/apply?"
        required: true
        default: "true"
        type: choice
        options: ["true", "false"]

      enableDestroy:
        description: "Enable destroy stage?"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]

      enableMondoo:
        description: "Run Mondoo Scan"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]

jobs:
  # Stage 1: Checkov Scan
  checkov:
    if: ${{ github.event.inputs.checkovScan == 'true' }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Checkov
        run: pip install checkov

      - name: Create Reports Directory
        run: mkdir -p reports

      - name: Run Checkov on all modules
        id: checkov_scan
        run: |
          # Run Checkov. If it fails, still continue.
          checkov -d terraform-project/ \
            --output junitxml \
            --output-file reports/checkov-report.xml || true

          # Guarantee file exists even if Checkov produces no output
          if [ ! -s reports/checkov-report.xml ]; then
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites></testsuites>" > reports/checkov-report.xml
          fi

      - name: Upload Checkov Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: reports/checkov-report.xml

      - name: Publish Test Report
        if: always()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: 'reports/checkov-report.xml'
          include_passed: true

  # Stage 2: Terraform Plan & Apply
  terraform:
    needs: [checkov]
    runs-on: ubuntu-latest
    environment: dev
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Terraform Init
        run: terraform -chdir=terraform-project init -backend-config=backend.tfvars
      - name: Terraform Plan
        run: |
          terraform -chdir=terraform-project plan -out=tfplan
          terraform -chdir=terraform-project show -no-color tfplan > terraform-project/plan-summary.txt
      - name: Upload Terraform Plan Summary
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-summary
          path: terraform-project/plan-summary.txt
      # - name: Manual Approval before Terraform Apply
      #   uses: trstringer/manual-approval@v1
      #   with:
      #     approvers: santuCG
      #     minimum-approvals: 1
      #     issue-title: "Approve Terraform Apply"
      #     issue-body: "Approve to apply Terraform changes to the **dev** environment."
      #     exclude-workflow-initiator-as-approver: false
      #     fail-on-denial: true
      #     secret: ${{ secrets.GITHUB_TOKEN }}

  # Stage 3: Destroy
  destroy:
    if: ${{ github.event.inputs.enableDestroy == 'true' }}
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Terraform Init
        run: terraform -chdir=terraform-project init -backend-config=backend.tfvars
      - name: Wait for approval before destroy
        uses: trstringer/manual-approval@v1
        with:
          approvers: user1,user2
          minimum-approvals: 1
          issue-title: "Approve Terraform Destroy"
          issue-body: "Approve to destroy Terraform resources in **dev**."
      - name: Terraform Destroy
        run: terraform -chdir=terraform-project destroy -auto-approve

  # Stage 4: Mondoo Scan
  mondoo:
    if: ${{ github.event.inputs.enableMondoo == 'true' }}
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - uses: actions/checkout@v4
      - name: Install Mondoo (cnspec)
        run: |
            curl --retry 3 --retry-delay 10 -sSL https://releases.mondoo.com/debian/pubkey.gpg | gpg --dearmor --output /usr/share/keyrings/mondoo-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/mondoo-archive-keyring.gpg] https://releases.mondoo.com/debian/ stable main" | tee /etc/apt/sources.list.d/mondoo.list && # export MONDOO_REGISTRATION_TOKEN="<YOUR_TOKEN_HERE>"
            
            apt update && apt install mondoo
      - name: Add cnspec to PATH
        run: echo "$HOME/.mondoo/bin" >> $GITHUB_PATH
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: Run Mondoo Scan
        run: cnspec scan aws --bundles policies/custom-s3-sg.mql.yaml --output json > mondoo-report.json
      - name: Upload Mondoo Report
        uses: actions/upload-artifact@v4
        with:
          name: mondoo-report
          path: mondoo-report.json
