# name: Terraform Infra Pipeline

# permissions:
#   contents: read
#   checks: write
#   issues: write

# on:
#   workflow_dispatch:
#     inputs:
#       securityScan:
#         description: "Select IaC Security Scanner"
#         required: true
#         default: "checkov"
#         type: choice
#         options: ["checkov", "mondoo", "none"]

#       enableDestroy:
#         description: "Enable destroy stage?"
#         required: true
#         default: "false"
#         type: choice
#         options: ["true", "false"]

# jobs:
#   # ====================================================================
#   # STAGE 1: IaC Security Scan
#   # ====================================================================

#   # Scans run only if NOT a destroy run (to avoid unnecessary compute)
#   checkov:
#     if: ${{ github.event.inputs.securityScan == 'checkov' && github.event.inputs.enableDestroy != 'true' }}
#     runs-on: ubuntu-latest
#     continue-on-error: true
#     steps:
#       - uses: actions/checkout@v4
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.x'
#       - name: Install Checkov
#         run: pip install checkov
#       - name: Run Checkov on all modules
#         run: checkov -d terraform-project/ || true

#   mondoo_scan: 
#     if: ${{ github.event.inputs.securityScan == 'mondoo' && github.event.inputs.enableDestroy != 'true' }}
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - name: Scan Terraform with Mondoo
#         uses: mondoohq/actions/terraform-hcl@main 
#         with:
#           service-account-credentials: ${{ secrets.MONDOO_SERVICE_ACCOUNT }}
#           path: terraform-project
#           output: full 

#   # ====================================================================
#   # STAGE 2: Terraform Plan & Apply
#   # ====================================================================
  
#   terraform:
#     needs: [checkov, mondoo_scan]
#     if: ${{ github.event.inputs.enableDestroy != 'true' && always() }} 
#     runs-on: ubuntu-latest
#     environment: 
#       name: dev
#     timeout-minutes: 60
#     steps:
#       - uses: actions/checkout@v4
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.7.0
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}
#       - name: Terraform Init
#         run: terraform -chdir=terraform-project init -backend-config=backend.tfvars
#       - name: Terraform Plan
#         run: |
#           terraform -chdir=terraform-project plan -out=tfplan
#           terraform -chdir=terraform-project show -no-color tfplan > terraform-project/plan-summary.txt
#       - name: Upload Terraform Plan Summary
#         uses: actions/upload-artifact@v4
#         with:
#           name: terraform-plan-summary
#           path: terraform-project/plan-summary.txt
#       - name: Terraform Apply
#         run: terraform -chdir=terraform-project apply -auto-approve tfplan

#   # ====================================================================
#   # STAGE 3: Destroy
#   # ====================================================================
  
#   destroy:
#     if: ${{ github.event.inputs.enableDestroy == 'true' }}
#     runs-on: ubuntu-latest
#     environment: 
#       name: dev
    
#     steps:
#       - uses: actions/checkout@v4
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.7.0
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}
#       - name: Terraform Init
#         run: terraform -chdir=terraform-project init -backend-config=backend.tfvars      
#       - name: Terraform Destroy
#         run: terraform -chdir=terraform-project destroy -auto-approve


name: Terraform Infra Pipeline

permissions:
  contents: read
  checks: write
  issues: write

on:
  workflow_dispatch:
    inputs:
      securityScan:
        description: "Select IaC Security Scanner"
        required: true
        default: "checkov"
        type: choice
        options: ["checkov", "mondoo", "none"]

      enableDestroy:
        description: "Enable destroy stage? (true will skip apply stages)"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]

jobs:
  # ====================================================================
  # STAGE 1: IaC Security Scan (Conditional Gates)
  # ====================================================================

  checkov:
    # Only run if checkov is selected AND it's not a destroy run
    if: ${{ github.event.inputs.securityScan == 'checkov' && github.event.inputs.enableDestroy != 'true' }}
    runs-on: ubuntu-latest
    continue-on-error: false # Fail the workflow if a security issue is found
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install Checkov
        run: pip install checkov
      - name: Run Checkov on all modules
        run: checkov -d terraform-project/ 

  mondoo_scan: 
    # Only run if mondoo is selected AND it's not a destroy run
    if: ${{ github.event.inputs.securityScan == 'mondoo' && github.event.inputs.enableDestroy != 'true' }}
    runs-on: ubuntu-latest
    continue-on-error: false # Fail the workflow if a security issue is found
    steps:
      - uses: actions/checkout@v4
      - name: Scan Terraform with Mondoo
        uses: mondoohq/actions/terraform-hcl@main 
        with:
          service-account-credentials: ${{ secrets.MONDOO_SERVICE_ACCOUNT }}
          path: terraform-project
          output: full 

  # ====================================================================
  # SECURITY GATE: Ensures Terraform runs after conditional scans
  # ====================================================================
  
  security_gate:
    # Needs both scan jobs, but runs regardless of whether they were skipped or ran
    needs: [checkov, mondoo_scan]
    # Runs IF it's an Apply run AND all dependencies either succeeded or were skipped.
    if: ${{ github.event.inputs.enableDestroy != 'true' && always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Verify Scan Status
        run: echo "Security gate passed/skipped. Proceeding to Terraform stages."

  # ====================================================================
  # STAGE 2: Terraform Plan & Apply 
  # ====================================================================
  
  terraform:
    # Now depends ONLY on the security_gate, which is guaranteed to run
    needs: [security_gate]
    # Runs IF it's not a destroy run AND the security_gate succeeded
    if: ${{ github.event.inputs.enableDestroy != 'true' && success() }} 
    runs-on: ubuntu-latest
    environment: 
      name: dev
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Terraform Init
        run: terraform -chdir=terraform-project init -backend-config=backend.tfvars
      - name: Terraform Plan
        run: |
          terraform -chdir=terraform-project plan -out=tfplan
          terraform -chdir=terraform-project show -no-color tfplan > terraform-project/plan-summary.txt
      - name: Upload Terraform Plan Summary
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-summary
          path: terraform-project/plan-summary.txt
      - name: Terraform Apply
        run: terraform -chdir=terraform-project apply -auto-approve tfplan

  # ====================================================================
  # STAGE 3: Destroy (Runs only if explicitly requested)
  # ====================================================================
  
  destroy:
    # Runs only if enableDestroy is true (mutually exclusive with the apply path)
    if: ${{ github.event.inputs.enableDestroy == 'true' }}
    runs-on: ubuntu-latest
    environment: 
      name: dev
    
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Terraform Init
        run: terraform -chdir=terraform-project init -backend-config=backend.tfvars      
      - name: Terraform Destroy
        run: terraform -chdir=terraform-project destroy -auto-approve